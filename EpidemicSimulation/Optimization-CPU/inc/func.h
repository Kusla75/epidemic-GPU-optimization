
#pragma once
#include <iostream>
#include <random>
#include <vector>
#include <string>
#include <fstream>
#include <ctime>
#include "person.h"

static const std::string resultsPathCPU = "../../Results/Optimization-CPU/";

// These are some helper functions that are used to generate data and radnomize it... ------------------

void RandomNoRepetition(std::vector<int>& v, std::default_random_engine& generator);

void GetMaxPeopleOnLocation(std::vector<int>* locations, const int locationArraySize, int& maxSize);

void InitiateAgents(Person* people, std::default_random_engine& generator);

void SetAgentsHome(Person* people, std::vector<int>* locations);

void InfectAgents(Person* people, std::default_random_engine& generator);

// Core functions. Used for moving, checking and making interactions between agents --------------------

void RemoveAgentFromCurrentLocation(Person person, int personIndex, std::vector<int>* locations);

void MakeInteractions(Person* people, std::vector<int>* locations, std::default_random_engine& generator, int locationsSize);

void ChangeAgentsLocation(Person* people, std::vector<int>* locations, std::default_random_engine& generator, int dayDuration);

void CheckAgentsStatus(Person* people, std::vector<int>* locations, std::default_random_engine& generator);

// Functions that are used to log and save data/results generated by simulation ------------------------

std::string GetCurrentDate();

std::string GetFileName(std::string path, std::string date);

void WriteInfo(int simulationTime, std::string& outputHistory);

void SimulationEndInfo(std::string& outputHistory, int executionTime, int maxLocationSize);

void LogSimulationParameters(std::string& outputHistory, std::string date, std::string resultsPath, std::string deviceType);
